---
title: Security for Plugin Developers
layout: developerchapter
wip: true
references:
- url: https://plugins.jenkins.io/script-security#ScriptSecurityPlugin-Developer%E2%80%99sguide
  title: Script Security Developer's Guide
---

Developers and maintainers of plugins play a crucial role in maintaining Jenkins security.
This chapter discusses the security practices required.

Monitor security advisories::

Monitor Jenkins
link:https://www.jenkins.io/security/advisories/[Security Advisories]
closely.
It may be necessary to modify your plugin to work and comply with security fixes.

Conform to access permissions::

Understand and conform to the
link:/doc/developer/security/security-architecture/[Security Architecture of Jenkins].
Specifically:

* Ensure that your code checks the ACL before performing a security-sensitive operation.
* Use the `StaplerProxy` interface to control read access to `AccessControlled` objects.

Store user credentials as secrets::

Protect user credentials by storing them on disk in a field of type `Secret`
and never in a simple `String` field.
Protect user credentials by storing them on disk in a field of type `Secret`
and never in a simple `String` field.
Use a getter that returns the same type to access the `Secrets` field
from other code.
See
link:/doc/developer/security/secrets/[Storing Secrets]
for background information, instructions, and code examples.

Implement appropriate script security::

Be sure that your plugin implements appropriate security
for custom Groovy scripts that users may need to create to customize Jenkins.

For more information, see the _Developer's Guide_ section of the
link:https://plugins.jenkins.io/script-security/[Script Security] documentation.

Provide Role Check for Callable::

Communication between the Jenkins controller and agents is implemented with the Java
link:https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Callable.html[Callable] interface.
Plugins should always implement a _role check_ that runs after a
`Callable` message to ensure that the object executes on the proper side of the controller-agent communication.
Jenkins 2.319 and Jenkins LTS 2.303.3 and later releases enforce this behavior.
A plugin that does not comply throws a `SecurityException` and logs an error message.

See
link:/doc/developer/security/remoting-callables/[Remoting Callables] and
link:/doc/book/security/controller-isolation/required-role-check/[Required Role Check]
for more information.

Protect form validation methods from unauthorized accesss::

Form validation code can be used to compromise private information.
To protect against this:

* Use a call to `Jenkins#checkPermission` to form validation code.

* Only accept `POST` requests for form validation code with side effects for plugins that run on current Jenkins releases.
This protects your plugin from cross-site request forgery (CSRF) attacks.

* Forms in plugins that run on older Jenkins releases may be sent using `GET` and need to use the `checkMethod` attribute.

////
https://wiki.jenkins.io/display/JENKINS/Making+your+plugin+behave+in+secured+Jenkins
////
